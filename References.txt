References.txt
			"""
02
Program: 7_1.py
03
Author: kkasp
04
Function drawCircle
05
-Expect Turtle object, coordinates of the circle's center point and
06
circle's radius as arguments
07
-Function draws circle
08
-Draw circle's circumference by turning 3 degrees and moving a given
09
distance, 120 times.
10
-Calculate the distance moved with formula 2.0 * 3.14 * radius /120
11
 
13

from pyglet.gl import *
from math import pi, sin, cos

window = pyglet.window.Window(width=400, height=400)

glClearColor(0.2, 0.4, 0.5, 1.0)

def circle(x, y, radius):
    """
    We want a pixel perfect circle. To get one,
    we have to approximate it densely with triangles.
    Each triangle thinner than a pixel is enough
    to do it. Sin and cosine are calculated once
    and then used repeatedly to rotate the vector.
    I dropped 10 iterations intentionally for fun.
    """
    iterations = int(2*radius*pi)
    s = sin(2*pi / iterations)
    c = cos(2*pi / iterations)

    dx, dy = radius, 0

    glBegin(GL_TRIANGLE_FAN)
    glVertex2f(x, y)
    for i in range(iterations+1 - 10):
        glVertex2f(x+dx, y+dy)
        dx, dy = (dx*c - dy*s), (dy*c + dx*s)
    glEnd()

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)

    glColor3f(0, 0, 0)

    circle(200, 200, 100)

    glColor3f(1, 1, 1)

    circle(250, 250, 10)

pyglet.app.run()

# def drawFingerCircles():
		# self.positions = []
		# step = 2 * math.pi / nr_elements
		# if clock_wise:
		# 	step *= -1
		# for i in range(nr_elements):
		# 	if angles is None:
		# 		phi = start + i * step

		# 	else:
		# 		phi = angles[i]

		# 	x = relative_center[0] + (radius * math.cos(phi)) 
		# 	y = relative_center[1] + (radius * math.sin(phi))
		# 	self.positions.append([x, y])
		
import serial
ser = serial.Serial('/dev/tty.ACM0', 9600) # args: path/to/ard, sampling rate  tty.ACM0
# def circle(x, y, radius):
#     """
#     We want a pixel perfect circle.
#     """
#     iterations = int(2 * radius * pi)
#     s = sin(2 * pi / iterations)
#     c = cos(2 * pi / iterations)
#     dx, dy = radius, 0
#     glBegin(GL_TRIANGLE_FAN)
#     glVertex2f(x, y)
#     for i in range(iterations + 1 - 10):
#         glVertex2f(x + dx, y + dy)
#         dx, dy = (dx * c - dy * s), (dy * c + dx * s)
#     glEnd()

    if not completeSection1:
        completeSection1 = sectionMain()
        if currentChord == pastChord:
            timeNoChange = timeNoChange + dt
            # print timeNoChange
        else:
            timeNoChange = 0
        if timeNoChange >= LOCK_TIME:
            stableInput = True
            # print stableInput
        pastChord = currentChord
    else not completeSection2:
        completeSection2 = sectionMain()
        if currentChord == correctChord:
            timeNoChange = timeNoChange + dt
            # print timeNoChange
        else:
            timeNoChange = 0
        if timeNoChange >= LOCK_TIME:
            stableInput = True
            # print stableInput
        pastChord = currentChord
    else not completeSection3:
        completeSection3 = sectionMain()
        if currentChord == correctChord:
            timeNoChange = timeNoChange + dt
            # print timeNoChange
        else:
            timeNoChange = 0
        if timeNoChange >= LOCK_TIME:
            stableInput = True
            # print stableInput
        pastChord = currentChord
    else:
        pass # end current program

# def checkCorrect(letter):
#     global correctChord
#     global correctList
#     global currentChord
#     global currentList
#     correctChord = letterDict[letter]
#     correctList = HardwareInterface.chordToList(correctChord)
#     currentHardware()

# def lockLetter(letter):
#     global currentChord
#     global pastChord
#     global timeNoChange
#     global sectionBackground
#     global letterIndex
#     global stableInput
#     if stableInput:
#         # set the current letter to the chord int
#         letterDict[letter] = currentChord
#         letterIndex += 1
#         stableInput = False
#         timeNoChange = 0
#         sectionBackground = pyglet.graphics.Batch()  # initiate batch
#     else:
#         currentHardware()
#         drawText(letter)
#         drawFingerCircles(currentList)
#         # sectionBackground.draw()
#         # draw the state of the fingers
#         HardwareInterface.setChord(currentChord)  # Stimulate currently active
#         # drawText(timeNoChange)  for debugging

# def sectionMain():
#     ''' First section that learns and saves user input for each letter'''
#     global letters
#     global letterDict
#     global letterIndex
#     complete = False
#     if letterIndex < len(letters):
#         if not completeSection1:
#             lockLetter(letters[letterIndex])
#         else:
#             checkCorrect()
#     else:
#         complete = True
#     return complete


    global currentChord
    global pastChord
    global timeNoChange
    global time
    global GLOBAL_TIME
    global completeSection1
    global stableInput

    letters = ('Space', 'Pause', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
           'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
           'X', 'Y', 'Z', '.', 'Backspace')
